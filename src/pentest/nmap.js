const nmap = require('node-libnmap');
const portscanner = require('portscanner');

const identifyService = async(port, host) => {
    try {
        const options = {
            range: [host],
            ports: `${port}`,
        };

        const result = await new Promise((resolve, reject) => {
            nmap.scan(options, (err, report) => {
                if (err) reject(err);
                else resolve(report);
            });
        });

        const hostReport = result[host] || {};
        const portData = hostReport.ports.find(p => p.port === port);

        if (portData && portData.service && portData.service.name) {
            return portData.service.name;
        }

        return 'Unknown service';
    } catch (error) {
        return `Unknown service (nmap error: ${error.message})`;
    }
};

const checkPortAndIdentifyService = async(port, target) => {
    try {
        const status = await portscanner.checkPortStatus(port, target);
        if (status === 'open') {
            const service = await identifyService(port, target);
            return { port, status, service };
        } else {
            return { port, status };
        }
    } catch (error) {
        return { port, status: 'error', error: error.message };
    }
};

const performPortScan = async(target, startPort, endPort, callback) => {
    const portsToScan = Array.from({ length: endPort - startPort + 1 }, (_, i) => startPort + i);
    let scanResults = [];

    // Use Promise.all to execute all port checks in parallel
    const portPromises = portsToScan.map(port => checkPortAndIdentifyService(port, target));

    try {
        const results = await Promise.all(portPromises);
        scanResults = results;
    } catch (error) {
        console.error('Error performing port scan:', error);
    }

    // Filter only open ports
    const openPorts = scanResults.filter(result => result.status === 'open');

    callback(openPorts);
};

module.exports = performPortScan;