const net = require('net');
const portscanner = require('portscanner');

const identifyService = (port, host) => {
  return new Promise((resolve) => {
    const socket = new net.Socket();

    socket.setTimeout(2000); // Set a timeout of 2 seconds
    socket.connect(port, host, () => {
      socket.write('HEAD / HTTP/1.0\r\n\r\n'); // Send a simple HTTP request
    });

    socket.on('data', (data) => {
      const response = data.toString();
      socket.destroy();
      if (response.includes('HTTP')) {
        resolve('HTTP');
      } else if (response.includes('SSH')) {
        resolve('SSH');
      } else if (response.includes('FTP')) {
        resolve('FTP');
      } else if (response.includes('SMTP')) {
        resolve('SMTP');
      } else if (response.includes('POP3')) {
        resolve('POP3');
      } else if (response.includes('IMAP')) {
        resolve('IMAP');
      } else if (response.includes('Telnet')) {
        resolve('Telnet');
      } else if (response.includes('SMB')) {
        resolve('SMB');
      } else {
        resolve('Unknown service');
      }
    });

    socket.on('timeout', () => {
      socket.destroy();
      resolve('Unknown service (timeout)');
    });

    socket.on('error', () => {
      resolve('Unknown service (error)');
    });
  });
};

const portScan = async (target, portRange) => {
  const [startPort, endPort] = portRange.split('-').map(Number);
  const portsToScan = Array.from({ length: endPort - startPort + 1 }, (_, i) => startPort + i);
  let scanResults = [];

  for (const port of portsToScan) {
    try {
      const status = await portscanner.checkPortStatus(port, target);
      if (status === 'open') {
        const service = await identifyService(port, target);
        scanResults.push({ port, status, service });
      }
    } catch (error) {
      scanResults.push({ port, status: 'error', error: error.message });
    }
  }

  return scanResults.filter(result => result.status === 'open');
};

module.exports = { portScan };
