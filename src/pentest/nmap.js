const tcpPing = require('tcp-ping');
const net = require('net');
const axios = require('axios');

async function identifyProtocol(target, port) {
    const knownProtocols = {
        21: 'FTP',
        22: 'SSH',
        23: 'Telnet',
        25: 'SMTP',
        53: 'DNS',
        80: 'HTTP',
        110: 'POP3',
        143: 'IMAP',
        443: 'HTTPS',
        3306: 'MySQL',
        3389: 'RDP',
        5900: 'VNC'
    };

    if (knownProtocols[port]) {
        return knownProtocols[port];
    }

    return new Promise((resolve) => {
        const client = new net.Socket();

        client.setTimeout(3000);
        client.connect(port, target, () => {
            client.write('HEAD / HTTP/1.1\r\nHost: ' + target + '\r\n\r\n');
        });

        client.on('data', (data) => {
            const response = data.toString();

            if (response.includes('SSH')) {
                resolve('SSH');
            } else if (response.includes('HTTP') || response.includes('html')) {
                resolve('HTTP');
            } else if (response.includes('220') && response.includes('FTP')) {
                resolve('FTP');
            } else {
                resolve('Unknown');
            }
            client.destroy();
        });

        client.on('error', () => {
            resolve('Unknown');
        });

        client.on('timeout', () => {
            resolve('Unknown');
            client.destroy();
        });
    });
}

async function scanTarget(target, portRange) {
    return new Promise((resolve, reject) => {
        const [startPort, endPort] = portRange.split('-').map(Number);
        const openPorts = [];

        let portsChecked = 0;
        const totalPorts = endPort - startPort + 1;

        for (let port = startPort; port <= endPort; port++) {
            tcpPing.ping({ address: target, port, attempts: 1 }, async (err, data) => {
                portsChecked++;
                if (!err && data.results[0].err === null) {
                    const protocol = await identifyProtocol(target, port);
                    openPorts.push({ port, protocol });
                }
                if (portsChecked === totalPorts) {
                    resolve(openPorts);
                }
            });
        }
    });
}

module.exports = scanTarget;

