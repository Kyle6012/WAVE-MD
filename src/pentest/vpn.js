
const { Client } = require('ssh2');
const { HttpsProxyAgent } = require('http-proxy-agent');
const os = require('os');
const axios = require('axios');

let sshClient = null;
let proxyAgent = null;
let localIp = null;

const getLocalIp = () => {
  const interfaces = os.networkInterfaces();
  for (const name of Object.keys(interfaces)) {
    for (const iface of interfaces[name]) {
      if (iface.family === 'IPv4' && !iface.internal) {
        return iface.address;
      }
    }
  }
  return null;
};

const startVPN = (sshConfig, proxyConfig) => {
  return new Promise((resolve, reject) => {
    if (sshClient) {
      return resolve('VPN is already running!');
    }

    sshClient = new Client();
    sshClient.on('ready', () => {
      sshClient.forwardOut(
        localIp,
        0,
        proxyConfig.host,
        proxyConfig.port,
        (err, stream) => {
          if (err) {
            sshClient.end();
            sshClient = null;
            return reject(`Error setting up proxy: ${err.message}`);
          }

          proxyAgent = new HttpsProxyAgent({
            protocol: 'http:',
            host: '127.0.0.1',
            port: 0,
            stream
          });

          resolve(`VPN started through ${proxyConfig.host}:${proxyConfig.port}`);
        }
      );
    }).connect(sshConfig);
  });
};

const stopVPN = () => {
  if (!sshClient) {
    return 'No VPN is running!';
  }

  sshClient.end();
  sshClient = null;
  proxyAgent = null;

  return 'VPN stopped';
};

const getProxyAgent = () => proxyAgent;

const configureAxios = () => {
  const proxyAgent = getProxyAgent();
  if (proxyAgent) {
    axios.defaults.httpsAgent = proxyAgent;
  } else {
    delete axios.defaults.httpsAgent;
  }
};
module.exports = {
  getLocalIp,
  startVPN,
  stopVPN,
  getProxyAgent,
  configureAxios,
};
