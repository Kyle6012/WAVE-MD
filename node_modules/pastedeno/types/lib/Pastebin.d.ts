import { ICreatePasteTextOptions, IPastebinOptions, Paste, User } from "./interfaces";
export declare abstract class AbstractPastebin {
    #private;
    requestTimeout: number;
    static version: string;
    constructor(config?: IPastebinOptions | string | null, options?: {
        fetch?: typeof globalThis.fetch;
        parseXML?: (_xml: string) => Record<string, string>;
    });
    setDebug(debug: boolean): void;
    /**
     * Get the content of a paste
     *
     * @param id ID of the paste
     * @param isPrivate is the paste private? Needs authentication
     * @returns { Promise<string> } returns the content of the paste
     */
    getPaste(id: string, isPrivate?: boolean): Promise<string>;
    /**
     * Create a paste
     *
     * @param options { ICreatePasteTextOptions } options for creating a paste
     * @returns { Promise<string> } returns the url of the created paste
     */
    createPaste(options: ICreatePasteTextOptions): Promise<string>;
    /**
     * Delete a paste
     *
     * @param pasteID { string } ID of the paste
     * @returns { Promise<string> } returns the response of the request
     */
    deletePaste(pasteID: string): Promise<string>;
    /**
     * List all pastes of a user
     *
     * @param limit { number } limit of pastes to return (default: 50, max: 1000)
     * @returns { Promise<Paste[]> } returns an array of pastes
     * @throws { Error } throws an error if the limit is not between 1 and 1000
     * @throws { Error } throws an error if the dev key is missing
     */
    listUserPastes(limit?: number): Promise<Paste[]>;
    /**
     * Get user information
     *
     * @returns { Promise<User> } returns the user information
     * @throws { Error } throws an error if the dev key is missing
     */
    getUserInfo(): Promise<User>;
    get debug(): boolean;
    get config(): IPastebinOptions;
    get hasDevKey(): boolean;
}
